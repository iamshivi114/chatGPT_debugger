import { ReadonlyJSONObject } from '@lumino/coreutils';
import { ISignal } from '@lumino/signaling';
import { BaseManager, ServerConnection, User, UserManager } from '@jupyterlab/services';
/**
 * The user API service manager.
 */
export declare class FakeUserManager extends BaseManager implements User.IManager {
    private _isReady;
    private _ready;
    private _identity;
    private _permissions;
    private _userChanged;
    private _connectionFailure;
    /**
     * Create a new user manager.
     */
    constructor(options: UserManager.IOptions | undefined, identity: User.IIdentity, permissions: ReadonlyJSONObject);
    /**
     * The server settings for the manager.
     */
    readonly serverSettings: ServerConnection.ISettings;
    /**
     * Test whether the manager is ready.
     */
    get isReady(): boolean;
    /**
     * A promise that fulfills when the manager is ready.
     */
    get ready(): Promise<void>;
    /**
     * Get the most recently fetched identity.
     */
    get identity(): User.IIdentity | null;
    /**
     * Get the most recently fetched permissions.
     */
    get permissions(): ReadonlyJSONObject | null;
    /**
     * A signal emitted when the user changes.
     */
    get userChanged(): ISignal<this, User.IUser>;
    /**
     * A signal emitted when there is a connection failure.
     */
    get connectionFailure(): ISignal<this, Error>;
    /**
     * Dispose of the resources used by the manager.
     */
    dispose(): void;
    /**
     * Force a refresh of the specs from the server.
     *
     * @returns A promise that resolves when the specs are fetched.
     *
     * #### Notes
     * This is intended to be called only in response to a user action,
     * since the manager maintains its internal state.
     */
    refreshUser(): Promise<void>;
}
